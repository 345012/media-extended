/* eslint-disable no-inner-declarations */
import obPlugin from "./scripts/ob.esbuild.mjs";
import { build, context } from "esbuild";
import stylePlugin from "esbuild-style-plugin";
import { readFileSync } from "fs";
import { join, resolve } from "path";
import semverPrerelease from "semver/functions/prerelease.js";
import NODE_BULTIIN from "builtin-modules";

function isPreRelease() {
  const myPackage = JSON.parse(readFileSync("./package.json", "utf-8"));
  return semverPrerelease(myPackage.version) !== null;
}

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/
`;

const CM_BULTIIN = [
  "@codemirror/autocomplete",
  "@codemirror/collab",
  "@codemirror/commands",
  "@codemirror/language",
  "@codemirror/lint",
  "@codemirror/search",
  "@codemirror/state",
  "@codemirror/text",
  "@codemirror/view",
  "@lezer/common",
  "@lezer/lr",
  "@lezer/highlight",
  "@codemirror/closebrackets",
  "@codemirror/comment",
  "@codemirror/fold",
  "@codemirror/gutter",
  "@codemirror/highlight",
  "@codemirror/history",
  "@codemirror/matchbrackets",
  "@codemirror/panel",
  "@codemirror/rangeset",
  "@codemirror/rectangular-selection",
  "@codemirror/stream-parser",
  "@codemirror/tooltip",
];

const isProd = process.env?.BUILD === "production";

/** @type import("esbuild").BuildOptions */
const opts = {
  bundle: true,
  platform: "browser",
  format: "cjs",
  mainFields: ["browser", "module", "main"],
  minify: isProd,
  define: {
    "process.env.NODE_ENV": JSON.stringify(process.env.BUILD ?? ""),
  },
  logLevel: process.env.BUILD === "development" ? "info" : "silent",
  external: [
    "obsidian",
    "electron",
    "@electron/remote",
    ...CM_BULTIIN,
    ...NODE_BULTIIN,
  ],
  mainFields: ["browser", "module", "main"],
  sourcemap: isProd ? false : "inline",
  loader: {
    ".svg": "text",
    ".ejs": "text",
  },
  entryPoints: ["src/mx-main.ts"],
  banner: { js: banner },
  outfile: "dist/main.js",
  tsconfig: "tsconfig.json",
  plugins: [
    stylePlugin({
      postcssConfigFile: resolve("./postcss.config.mjs"),
    }),
    obPlugin({ beta: isPreRelease() }),
  ],
};

if (!isProd) {
  const ctx = await context({ ...opts, logLevel: "error" });
  try {
    await ctx.watch();
  } catch (err) {
    console.error(err);
    await cleanup();
  }
  process.on("SIGINT", cleanup);
  async function cleanup() {
    await ctx.dispose();
    // scheduleOnDisposeCallbacks defer function calls using setTimeout(...,0)
    // so we need to wait a bit before exiting
    // setTimeout(() => process.exit(), 100);
  }
} else {
  await build(opts);
}
